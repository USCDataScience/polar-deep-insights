# encoding: utf-8
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM ubuntu:16.04
MAINTAINER USC Information Retrieval and Data Science (IRDS) irds-L@mymaillists.usc.edu

# Internal unpriviled user will have this ID:
ENV CONTAINER_USER_ID="pdi" \
    CONTAINER_GROUP_ID="pdi"

ENV PDI_HOME="/home/pdi/src/polar-deep-insights"

# Updates OS and adds system required packages
RUN apt-get update && apt-get -y upgrade && apt-get install -y --no-install-recommends \
      python \
      python-pip \
      python-setuptools \
      build-essential \
      openjdk-8-jre \
      vim \
      emacs \
      git \
      sudo \
      curl \
      libffi-dev \
      software-properties-common \
      wget \
      maven \
      unzip \
      jq \
        && \
      apt-get clean && \
      rm -rf /var/lib/apt/lists/*

# OpenJDK version 8 for ES
RUN add-apt-repository ppa:openjdk-r/ppa
RUN apt-get update
RUN apt-get install -y openjdk-8-jdk
RUN apt-get install -y openjdk-8-jre
RUN update-alternatives --config java
RUN update-alternatives --config javac

# Python / PIP
RUN pip install --upgrade pip

# creates a user "pdi"
RUN useradd -U -d /home/pdi -s /bin/sh ${CONTAINER_USER_ID}
RUN mkdir /home/pdi

# deploy dir
RUN mkdir -p /deploy/requirements

# permissions
RUN mkdir /home/pdi/src
RUN chown -R pdi:pdi /home/pdi
RUN chown -R pdi:pdi /home/pdi/src
RUN chown -R pdi:pdi /deploy

# sudo access
RUN adduser pdi sudo
RUN echo "pdi ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

# After this point everthing is done as unpriveleged user
USER pdi

# Checkout PDI and then enter insights-generator dir
WORKDIR /home/pdi/src
RUN git clone https://github.com/USCDataScience/polar-deep-insights.git

# Insight Generator Python dependencies
WORKDIR /home/pdi/src/polar-deep-insights/insight-generator

# need root to install pip deps
USER root
RUN pip install -r dependencies.txt
USER pdi

# NLTK
RUN python -c "import nltk; nltk.download('punkt');"

# Downloading the Requirements 
WORKDIR /deploy/requirements
#RUN curl -L -O https://nlp.stanford.edu/software/stanford-ner-2018-02-27.zip && \
RUN curl -L -o stanford-ner-2018-02-27.zip "https://www.dropbox.com/s/n5gomcswhb9nxdr/stanford-ner-2018-02-27.zip?dl=1" && \
unzip stanford-ner-2018-02-27.zip && \
git clone https://github.com/chrismattmann/lucene-geo-gazetteer.git && \
git clone https://github.com/kermitt2/grobid.git && \
cd grobid && \
git clone https://github.com/kermitt2/grobid-quantities.git && \
cd grobid-quantities && \
git checkout 94d6f26


# Installing Gradle
RUN curl https://services.gradle.org/distributions/gradle-4.9-bin.zip -O -J -L && \
unzip gradle-4.9-bin.zip
ENV PATH=$PATH:/deploy/requirements/gradle-4.9/bin
RUN gradle -v

# Installing Grobid (Required for Grobid-Quantities)
WORKDIR /deploy/requirements/grobid/
RUN ./gradlew clean install


# Build models
RUN mkdir -p /deploy/requirements/grobid/grobid-home/models/units
RUN mkdir -p /deploy/requirements/grobid/grobid-home/models/quantities
WORKDIR /deploy/requirements/grobid/grobid-home/models
RUN curl -L -o quantities/model.wapiti "https://www.dropbox.com/s/ggkm7u480ixubbm/model.wapiti?dl=1"
RUN curl -L -o units/model.wapiti "https://www.dropbox.com/s/kux0xjjbswkvv0l/model.wapiti?dl=1"

# Installing Grobid-Quantities
WORKDIR /deploy/requirements/grobid/grobid-quantities
RUN mvn -Dmaven.test.skip=true clean install war:war

# Running Tika-Server
# Need to download JAR file from repo, install and run java -jar tika-server-1.1X-SNAPSHOT.jar
RUN mkdir /deploy/requirements/tika-server
WORKDIR /deploy/requirements/tika-server
RUN curl -L -o tika-server-1.15-SNAPSHOT.jar.zip "https://www.dropbox.com/s/9w0pynm70doqrhn/tika-server-1.15-SNAPSHOT.jar.zip?dl=1"
RUN unzip tika-server-1.15-SNAPSHOT.jar.zip

# Installing Geo-Topic-Parser

WORKDIR /deploy/requirements/lucene-geo-gazetteer/
ENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64
ENV PATH $PATH:$JAVA_HOME/bin
RUN mvn install assembly:assembly
ENV PATH $PATH:/deploy/requirements/lucene-geo-gazetteer/src/main/bin
#RUN curl -O http://download.geonames.org/export/dump/allCountries.zip
RUN curl -L -o allCountries.zip "https://www.dropbox.com/s/boegavpl8ojaaa5/allCountries.zip?dl=1"
RUN unzip allCountries.zip
RUN lucene-geo-gazetteer -i geoIndex -b allCountries.txt

# env vars
ENV REDIS_ENDPOINT localhost
ENV TIKA_PATH http://localhost:9998
ENV GROBID_QUANTITY_ENDPOINT http://localhost:8060
ENV GEO_TOPIC_ENDPOINT http://localhost:8765
ENV ES_URL http://polar-deep-insights/elasticsearch
ENV CLASSPATH /deploy/requirements/stanford-ner-2018-02-27/stanford-ner.jar
ENV STANDFORD_NER_MODEL_PATH /deploy/requirements/stanford-ner-2018-02-27/classifiers/english.muc.7class.distsim.crf.ser.gz

# Copy entrypoint script into the container
COPY ./entrypoint.sh /deploy/entrypoint.sh

# Geo Topic Parser, Tika Server, and Grobid
EXPOSE 8765
EXPOSE 9998
EXPOSE 8060

CMD ["/deploy/entrypoint.sh"]
